<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:CohoistChat.Maui"
             xmlns:shared="clr-namespace:CohoistChat.Shared;assembly=CohoistChat.Shared"
             xmlns:sys="clr-namespace:System;assembly=netstandard"
             xmlns:sf="clr-namespace:Syncfusion.Maui.ListView;assembly=Syncfusion.Maui.ListView"
             x:Class="CohoistChat.Maui.MainPage">
	<ContentPage.ToolbarItems>
		<ToolbarItem Text="Lock" Clicked="OnPrivateClicked" AutomationId="Private" />
		<ToolbarItem Text="Clear" Clicked="OnClearClicked" AutomationId="Clear" />
		<ToolbarItem Text="Users" Clicked="OnUsersClicked"/>
	</ContentPage.ToolbarItems>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>
		<WebView Source="loading.html" IsVisible="False">
			<WebView.Triggers>
				<DataTrigger TargetType="WebView" Binding="{Binding Status}" Value="{x:Static local:StatusEnum.Connecting}">
					<Setter Property="IsVisible" Value="True" />
				</DataTrigger>
			</WebView.Triggers>
		</WebView>
		<sf:SfListView Grid.Row="0" x:Name="MessagesList" ItemsSource="{Binding Messages}" AutoFitMode="Height" Margin="20,0" >
            <sf:SfListView.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <VerticalStackLayout Grid.Column="0">
                            <VerticalStackLayout.Triggers>
                                <DataTrigger TargetType="VerticalStackLayout" Binding="{Binding MessageType}" Value="{x:Static shared:MessageTypeEnum.Info}">
                                    <Setter Property="BackgroundColor" Value="{x:Null}" />
                                </DataTrigger>
                                <DataTrigger TargetType="VerticalStackLayout" Binding="{Binding MessageType}" Value="{x:Static shared:MessageTypeEnum.Connected}">
                                    <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource LightCyan}, Dark={StaticResource DarkCyan}}" />
                                </DataTrigger>
                                <DataTrigger TargetType="VerticalStackLayout" Binding="{Binding MessageType}" Value="{x:Static shared:MessageTypeEnum.Disconnected}">
                                    <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource LightGray}, Dark={StaticResource DarkGray}}" />
                                </DataTrigger>
                                <DataTrigger TargetType="VerticalStackLayout" Binding="{Binding MessageType}" Value="{x:Static shared:MessageTypeEnum.Me}">
                                    <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource LightGreen}, Dark={StaticResource DarkGreen}}" />
                                </DataTrigger>
                                <DataTrigger TargetType="VerticalStackLayout" Binding="{Binding MessageType}" Value="{x:Static shared:MessageTypeEnum.NotMe}">
                                    <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource LightBlue}, Dark={StaticResource DarkBlue}}" />
                                </DataTrigger>
                            </VerticalStackLayout.Triggers>
                            <Label Text="{Binding SenderDisplayName, StringFormat='{0}:'}" Margin="8,0" HorizontalOptions="End" FontAttributes="Bold"/>
                            <Label BindingContext="{Binding Source={x:Static sys:DateTime.Now}, Mode=OneWay}" Text="{Binding StringFormat='{0:g}', Mode=OneWay}" Margin="8,0" HorizontalOptions="End" FontSize="12"/>
                        </VerticalStackLayout>
                        <Label Grid.Column="1" Text="{Binding Payload}" Margin="8,0" VerticalTextAlignment="Center" LineBreakMode="WordWrap">
                            <FlyoutBase.ContextFlyout>
                                <MenuFlyout>
									<MenuFlyoutItem Text="Copy" Command="{Binding CopyCommand, Source={local:ChatViewModel}}" CommandParameter="{Binding Payload}">
										<MenuFlyoutItem.KeyboardAccelerators>
											<KeyboardAccelerator Modifiers="Ctrl" Key="C" />
										</MenuFlyoutItem.KeyboardAccelerators>
									</MenuFlyoutItem>
								</MenuFlyout>
                            </FlyoutBase.ContextFlyout>
                        </Label>
                    </Grid>
                </DataTemplate>
            </sf:SfListView.ItemTemplate>
        </sf:SfListView>
        <Button Grid.Row="1" Text="Reconnect" Clicked="ReconnectButton_Clicked" Margin="20,-40,20,0"  HorizontalOptions="End" >
            <Button.Style>
                <Style TargetType="Button">
                    <Setter Property="IsVisible" Value="False" />
                    <Setter Property="IsEnabled" Value="False" />
                    <Style.Triggers>
                        <DataTrigger TargetType="Button" Binding="{Binding Status}" Value="{x:Static local:StatusEnum.Disconnected}">
                            <Setter Property="IsEnabled" Value="True" />
                            <Setter Property="IsVisible" Value="True" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <Grid Grid.Row="2" Margin="20,-10,20,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <HorizontalStackLayout Grid.Row="1" Grid.Column="0">
                <CheckBox x:Name="checkBox" />
                <Label Text="Multiline" VerticalTextAlignment="Center">
                    <Label.Triggers>
                        <DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference checkBox}, Path=IsChecked}" Value="true">
                            <Setter Property="FontAttributes" Value="Italic, Bold" />
                        </DataTrigger>
                    </Label.Triggers>
                </Label>
            </HorizontalStackLayout>
            <Label Grid.Column="1" Text="{Binding StatusText}" FontSize="14" VerticalOptions="End" HorizontalTextAlignment="End" LineBreakMode="WordWrap" />
        </Grid>
        <StackLayout Grid.Row="3" Orientation="Horizontal" HorizontalOptions="FillAndExpand" Margin="20,0,20,20">
            <Editor x:Name="MessageEditor" Placeholder="Enter your message" MinimumHeightRequest="120" AutoSize="TextChanges" HorizontalOptions="FillAndExpand" Margin="0,0,8,0">
                <Editor.Triggers>
                    <DataTrigger TargetType="Editor" Binding="{Binding Source={x:Reference checkBox}, Path=IsChecked}" Value="true">
                        <Setter Property="IsVisible" Value="True" />
                        <Setter Property="Text" Value="{Binding Source={x:Reference MessageEntry},Path=Text}" />
                    </DataTrigger>
                    <DataTrigger TargetType="Editor" Binding="{Binding Source={x:Reference checkBox}, Path=IsChecked}" Value="False">
                        <Setter Property="IsVisible" Value="False" />
                    </DataTrigger>
                </Editor.Triggers>
            </Editor>
            <Entry x:Name="MessageEntry" Placeholder="Enter your message" HorizontalOptions="FillAndExpand" Margin="0,0,8,0">
                <Entry.Triggers>
                    <DataTrigger TargetType="Entry" Binding="{Binding Source={x:Reference checkBox}, Path=IsChecked}" Value="true">
                        <Setter Property="IsVisible" Value="False" />
                    </DataTrigger>
                    <DataTrigger TargetType="Entry" Binding="{Binding Source={x:Reference checkBox}, Path=IsChecked}" Value="False">
                        <Setter Property="IsVisible" Value="True" />
                    </DataTrigger>
                </Entry.Triggers>
            </Entry>
            <Button Text=">" Clicked="SendButton_Clicked">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="IsEnabled" Value="False" />
                        <Style.Triggers>
                            <DataTrigger TargetType="Button" Binding="{Binding Status}" Value="{x:Static local:StatusEnum.Connected}">
                                <Setter Property="IsEnabled" Value="True" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackLayout>
    </Grid>
</ContentPage>
